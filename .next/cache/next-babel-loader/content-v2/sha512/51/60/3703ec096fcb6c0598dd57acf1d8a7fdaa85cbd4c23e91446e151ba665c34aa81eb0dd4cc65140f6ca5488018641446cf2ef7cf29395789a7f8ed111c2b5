{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\\\u81EA\\u5B78\\\\React\\\\ReactMeetups\\\\pages\\\\index.js\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\"; //NextJS will not include this in your client's side bundle.\n\nimport { Fragment } from 'react';\nimport Head from 'next/head'; // add a title in HTML\n// will receive props set in getStaticProps\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly active React meetups!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n} // use one of them : getServerSideProps/ getStaticProps\n// (reserved name)\n// will run on the server after deployment(not on a client browser)\n// run for every incoming requests(but you need to wait for request, use when data change frequencly)\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n// fetch data from API/filesystem..\n//   return {\n//     props: { meetups: DUMMY_MEETUPS },\n//   };\n// }\n//static site generation\n// it need to be this name (reserved name)\n// will perform getStaticProps before perform component function\n// pregenerate the page during the build process\n\n\nexport async function getStaticProps() {\n  // fetch data from API..\n  const client = await MongoClient.connect(\"mongodb+srv://michelle:mimi0933547250@cluster0.16fq1.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray(); //find will return all documents\n\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1 // the page will be regenerate by server every 1 seconds. after deployment\n\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/USER/Desktop/自學/React/ReactMeetups/pages/index.js"],"names":["MeetupList","MongoClient","Fragment","Head","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B,C,CAAuC;;AACvC,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB,C,CAAgC;AAGhC;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,OAAO,EAAC;AAFV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AAEE;AACF;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AAEA,QAAMC,MAAM,GAAG,MAAMP,WAAW,CAACQ,OAAZ,CACnB,sGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB,CAVqC,CAUqB;;AAE1DN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,KAAa;AAChCC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADkB;AAEhCC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFgB;AAGhCC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHkB;AAIhCC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJ4B,OAAb,CAAZ;AADJ,KADF;AASLC,IAAAA,UAAU,EAAE,CATP,CASU;;AATV,GAAP;AAWD;AAED,eAAepB,QAAf","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\r\nimport { MongoClient } from \"mongodb\"; //NextJS will not include this in your client's side bundle.\r\nimport { Fragment } from 'react';\r\nimport Head from 'next/head';   // add a title in HTML\r\n\r\n\r\n// will receive props set in getStaticProps\r\nfunction HomePage(props) {\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>React Meetups</title>\r\n        <meta\r\n          name='description'\r\n          content='Browse a huge list of highly active React meetups!'\r\n        />\r\n      </Head>\r\n      <MeetupList meetups={props.meetups} />;\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n// use one of them : getServerSideProps/ getStaticProps\r\n\r\n// (reserved name)\r\n// will run on the server after deployment(not on a client browser)\r\n// run for every incoming requests(but you need to wait for request, use when data change frequencly)\r\n// export async function getServerSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n\r\n  // fetch data from API/filesystem..\r\n//   return {\r\n//     props: { meetups: DUMMY_MEETUPS },\r\n//   };\r\n// }\r\n\r\n\r\n//static site generation\r\n// it need to be this name (reserved name)\r\n// will perform getStaticProps before perform component function\r\n// pregenerate the page during the build process\r\nexport async function getStaticProps() {\r\n  // fetch data from API..\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://michelle:mimi0933547250@cluster0.16fq1.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find().toArray(); //find will return all documents\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => ({\r\n        title: meetup.title,\r\n        address: meetup.address,\r\n        image: meetup.image,\r\n        id: meetup._id.toString(),\r\n      })),\r\n    },\r\n    revalidate: 1, // the page will be regenerate by server every 1 seconds. after deployment\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}