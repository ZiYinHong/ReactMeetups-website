{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\\\u81EA\\u5B78\\\\React\\\\ReactMeetups\\\\pages\\\\index.js\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nconst DUMMY_MEETUPS = [{\n  id: \"m1\",\n  title: \"A First Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 5, 12345 Some City\",\n  description: \"This is a first meetup!\"\n}, {\n  id: \"m2\",\n  title: \"A Second Meetup\",\n  image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n  address: \"Some address 10, 12345 Some City\",\n  description: \"This is a second meetup!\"\n}]; // will receive props set in getStaticProps\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n} // use one of them : getServerSideProps/ getStaticProps\n\n/*\r\n// (reserved name)\r\n// will run on the server after deployment(not on a client browser)\r\n// run for every incoming requests(but you need to wait for request, use when data change frequencly)\r\nexport async function getServerSideProps(context) {\r\n  const req = context.req;\r\n  const res = context.res;\r\n\r\n  // fetch data from API/filesystem..\r\n  return {\r\n    props: { meetups: DUMMY_MEETUPS },\r\n  };\r\n}\r\n*/\n//static site generation\n// it need to be this name (reserved name)\n// will perform getStaticProps before perform component function\n// pregenerate the page during the build process\n\n\nexport async function getStaticProps() {\n  // fetch data from API..\n  const client = await MongoClient.connect(\"mongodb+srv://michelle:mimi0933547250@cluster0.16fq1.mongodb.net/meetup?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetuosCollection = db.collection(\"meetups\");\n  const meetups = await meetuosCollection.find().toArray(); //find will return all documents\n\n  client.close();\n  return {\n    props: {\n      meetups: meetups\n    },\n    revalidate: 1 // the page will be regenerate by server every 10 seconds. after deployment\n\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/USER/Desktop/自學/React/ReactMeetups/pages/index.js"],"names":["MeetupList","DUMMY_MEETUPS","id","title","image","address","description","HomePage","props","meetups","getStaticProps","client","MongoClient","connect","db","meetuosCollection","collection","find","toArray","close","revalidate"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AAEA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,iCALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CADoB,EASpB;AACEJ,EAAAA,EAAE,EAAE,IADN;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,KAAK,EACH,wHAJJ;AAKEC,EAAAA,OAAO,EAAE,kCALX;AAMEC,EAAAA,WAAW,EAAE;AANf,CAToB,CAAtB,C,CAmBA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AAEA,QAAMC,MAAM,GAAG,MAAMC,WAAW,CAACC,OAAZ,CACnB,qGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMP,OAAO,GAAG,MAAMM,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB,CAVqC,CAUqB;;AAE1DP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLX,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KADF;AAELW,IAAAA,UAAU,EAAE,CAFP,CAEU;;AAFV,GAAP;AAID;AAED,eAAeb,QAAf","sourcesContent":["import MeetupList from \"../components/meetups/MeetupList\";\r\n\r\nconst DUMMY_MEETUPS = [\r\n  {\r\n    id: \"m1\",\r\n    title: \"A First Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\r\n    address: \"Some address 5, 12345 Some City\",\r\n    description: \"This is a first meetup!\",\r\n  },\r\n  {\r\n    id: \"m2\",\r\n    title: \"A Second Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\r\n    address: \"Some address 10, 12345 Some City\",\r\n    description: \"This is a second meetup!\",\r\n  },\r\n];\r\n\r\n// will receive props set in getStaticProps\r\nfunction HomePage(props) {\r\n  return <MeetupList meetups={props.meetups} />;\r\n}\r\n\r\n// use one of them : getServerSideProps/ getStaticProps\r\n/*\r\n// (reserved name)\r\n// will run on the server after deployment(not on a client browser)\r\n// run for every incoming requests(but you need to wait for request, use when data change frequencly)\r\nexport async function getServerSideProps(context) {\r\n  const req = context.req;\r\n  const res = context.res;\r\n\r\n  // fetch data from API/filesystem..\r\n  return {\r\n    props: { meetups: DUMMY_MEETUPS },\r\n  };\r\n}\r\n*/\r\n\r\n//static site generation\r\n// it need to be this name (reserved name)\r\n// will perform getStaticProps before perform component function\r\n// pregenerate the page during the build process\r\nexport async function getStaticProps() {\r\n  // fetch data from API..\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://michelle:mimi0933547250@cluster0.16fq1.mongodb.net/meetup?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetuosCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetuosCollection.find().toArray(); //find will return all documents\r\n\r\n  client.close();\r\n  \r\n  return {\r\n    props: { meetups: meetups },\r\n    revalidate: 1, // the page will be regenerate by server every 10 seconds. after deployment\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}